// void select_object(Image img, int sens, int bits, int P)
// {
//     int len = img.width * img.height * 4;
//     uint8* slc = (uint8*)malloc(len);
//     memcpy(slc, img.pixels, len);
//
//     for(int y=0; y < img.height-(P*2); y += P) {
//
//         uint8* row =  img.pixels + (y * img.width * RGBA);
//
//         for(int x=0; x < img.width-(P*2); x += P) {
//
//             uint8* col = row + (x * RGBA);
//
//             /* P by P
//             RGBA|RGBA|RGBA|RGBA
//             RGBA|RGBA|RGBA|RGBA
//             RGBA|RGBA|RGBA|RGBA
//             */
//             int a[RGBA] = {0};
//             for(int i=0; i < P; i++) {
//                 uint8* nrow = col + (i * img.width * RGBA);
//                 for(int j=0; j < P * RGBA; j++) {
//                     uint8* cc = nrow + j;
//                     a[j % RGBA] += *cc;
//                 }
//             }
//
//             uint8* ncol = col + P * RGBA;
//
//             // next P by P
//             int b[RGBA] = {0};
//             for(int i=0; i < P; i++) {
//                 uint8* nrow = ncol + (i * img.width * RGBA);
//                 for(int j=0; j < P * RGBA; j++) {
//                     uint8* cc = nrow + j;
//                     b[j % RGBA] += *cc;
//                 }
//             }
//
//             col = col + (P * img.width * RGBA);
//
//             // lower P by P
//             int c[RGBA] = {0};
//             for(int i=0; i < P; i++) {
//                 uint8* nrow = col + (i * img.width * RGBA);
//                 for(int j=0; j < P * RGBA; j++) {
//                     uint8* cc = nrow + j;
//                     c[j % RGBA] += *cc;
//                 }
//             }
//
//             uint8* srow =  slc + ((y + P - 1) * img.width * RGBA);
//             uint8* scol = srow + ((x + P - 1) * RGBA);
//
//             for(int i=0; i < RGBA; i++) {
//                 a[i] /= P;
//                 b[i] /= P;
//                 c[i] /= P;
//             }
//
//             if (sens != 0) {
//
//                 int difc = 0;
//                 for(int i=0; i < RGBA; i++) {
//                     difc += DIFF( a[i], b[i]);
//                 }
//
//                 int difn = 0;
//                 for(int i=0; i < RGBA; i++) {
//                     difn += DIFF( a[i], c[i]);
//                 }
//
//                 if (difc > sens || difn > sens) {
//                     scol[0] = 255;
//                     scol[1] = 0;
//                     scol[2] = 0;
//                 }
//             }
//             else {
//                 // current pixel value
//                 int cp = (BIT_RANGE(a[0], 8, bits) << (bits * 2)) | (BIT_RANGE(a[1], 8, bits) << bits) | (BIT_RANGE(a[2], 8, bits));
//
//                 // // pixel right value
//                 int rp = (BIT_RANGE(b[0], 8, bits) << (bits * 2)) | (BIT_RANGE(b[1], 8, bits) << bits) | (BIT_RANGE(b[2], 8, bits));
//
//                 // // pixel below value
//                 int bp = (BIT_RANGE(c[0], 8, bits) << (bits * 2)) | (BIT_RANGE(c[1], 8, bits) << bits) | (BIT_RANGE(c[2], 8, bits));
//
//                 if (cp != rp || cp != bp) {
//                     scol[0] = 255;
//                     scol[1] = 0;
//                     scol[2] = 0;
//                 }
//             }
//         }
//     }
//     memcpy(img.pixels, slc, len);
// }